'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TokenRequestFactory = require('./TokenRequestFactory');

var _TokenRequestFactory2 = _interopRequireDefault(_TokenRequestFactory);

var _FetchRequestPerformer = require('./FetchRequestPerformer');

var _FetchRequestPerformer2 = _interopRequireDefault(_FetchRequestPerformer);

var _FetchRequestParser = require('./FetchRequestParser');

var _FetchRequestParser2 = _interopRequireDefault(_FetchRequestParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var API_BASE_URL = 'https://api.clubhouse.io';
var API_VERSION = 'beta';

/** */


var defaultConfig = {
  baseURL: API_BASE_URL,
  version: API_VERSION
};

/**
 * @class Client
*/

var Client = function () {
  function Client() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig,
        baseURL = _ref.baseURL,
        version = _ref.version;

    var requestFactory = arguments[1];
    var requestPerformer = arguments[2];
    var responseParser = arguments[3];

    _classCallCheck(this, Client);

    this.baseURL = baseURL;
    this.version = version;
    this.requestFactory = requestFactory;
    this.requestPerformer = requestPerformer;
    this.responseParser = responseParser;
  }
  /** */


  _createClass(Client, [{
    key: 'generateUrl',
    value: function generateUrl(uri) {
      return this.baseURL + '/api/' + this.version + '/' + uri;
    }
  }, {
    key: 'listResource',
    value: function listResource(uri) {
      var URL = this.generateUrl(uri);
      var request = this.requestFactory.createRequest(URL);
      return this.requestPerformer.performRequest(request).then(this.responseParser.parseResponse);
    }
  }, {
    key: 'getResource',
    value: function getResource(uri, params) {
      var URL = this.generateUrl(uri);
      var request = params ? this.requestFactory.createRequest(URL, 'GET', params) : this.requestFactory.createRequest(URL);
      return this.requestPerformer.performRequest(request).then(this.responseParser.parseResponse);
    }
  }, {
    key: 'createResource',
    value: function createResource(uri, params) {
      var URL = this.generateUrl(uri);
      var request = this.requestFactory.createRequest(URL, 'POST', params);
      return this.requestPerformer.performRequest(request).then(this.responseParser.parseResponse);
    }
  }, {
    key: 'updateResource',
    value: function updateResource(uri, params) {
      var URL = this.generateUrl(uri);
      var request = this.requestFactory.createRequest(URL, 'PUT', params);
      return this.requestPerformer.performRequest(request).then(this.responseParser.parseResponse);
    }
  }, {
    key: 'deleteResource',
    value: function deleteResource(uri) {
      var URL = this.generateUrl(uri);
      var request = this.requestFactory.createRequest(URL, 'DELETE');
      return this.requestPerformer.performRequest(request).then(this.responseParser.parseResponse);
    }

    /** */

  }, {
    key: 'listMembers',
    value: function listMembers() {
      return this.listResource('members');
    }

    /** */

  }, {
    key: 'getMember',
    value: function getMember(userID) {
      return this.getResource('members/' + userID);
    }

    /** */

  }, {
    key: 'getCurrentUser',
    value: function getCurrentUser() {
      return this.getResource('user');
    }

    /** */

  }, {
    key: 'listProjects',
    value: function listProjects() {
      return this.listResource('projects');
    }

    /** */

  }, {
    key: 'getProject',
    value: function getProject(id) {
      return this.getResource('projects/' + id);
    }

    /** */

  }, {
    key: 'createProject',
    value: function createProject(params) {
      return this.createResource('projects', params);
    }

    /** */

  }, {
    key: 'updateProject',
    value: function updateProject(id, params) {
      return this.updateResource('projects/' + id, params);
    }

    /** */

  }, {
    key: 'deleteProject',
    value: function deleteProject(id) {
      return this.deleteResource('projects/' + id);
    }

    /** */

  }, {
    key: 'listEpics',
    value: function listEpics() {
      return this.listResource('epics');
    }

    /** */

  }, {
    key: 'getEpic',
    value: function getEpic(epicID) {
      return this.getResource('epics/' + epicID);
    }

    /** */

  }, {
    key: 'createEpic',
    value: function createEpic(params) {
      return this.createResource('epics', params);
    }

    /** */

  }, {
    key: 'updateEpic',
    value: function updateEpic(epicID, params) {
      return this.updateResource('epics/' + epicID, params);
    }

    /** */

  }, {
    key: 'deleteEpic',
    value: function deleteEpic(epicID) {
      return this.deleteResource('epics/' + epicID);
    }

    /** */

  }, {
    key: 'listStories',
    value: function listStories(projectID) {
      return this.listResource('projects/' + projectID + '/stories');
    }

    /** */

  }, {
    key: 'createStory',
    value: function createStory(params) {
      return this.createResource('stories', params);
    }

    /** */

  }, {
    key: 'getStory',
    value: function getStory(storyID) {
      return this.getResource('stories/' + storyID);
    }

    /** */

  }, {
    key: 'updateStory',
    value: function updateStory(storyID, params) {
      return this.updateResource('stories/' + storyID, params);
    }

    /** */

  }, {
    key: 'deleteStory',
    value: function deleteStory(storyID) {
      return this.deleteResource('stories/' + storyID);
    }

    /** */

  }, {
    key: 'createStoryComment',
    value: function createStoryComment(storyID, text) {
      return this.createResource('stories/' + storyID + '/comments', { text: text });
    }

    /** */

  }, {
    key: 'listTasks',
    value: function listTasks(storyID) {
      return this.listResource('stories/' + storyID + '/tasks');
    }

    /** */

  }, {
    key: 'createTask',
    value: function createTask(storyID, params) {
      return this.createResource('stories/' + storyID + '/tasks', params);
    }

    /** */

  }, {
    key: 'getTask',
    value: function getTask(storyID, taskID) {
      return this.getResource('stories/' + storyID + '/tasks/' + taskID);
    }

    /** */

  }, {
    key: 'updateTask',
    value: function updateTask(storyID, taskID, params) {
      return this.updateResource('stories/' + storyID + '/tasks/' + taskID, params);
    }

    /** */

  }, {
    key: 'deleteTask',
    value: function deleteTask(storyID, taskID) {
      return this.deleteResource('stories/' + storyID + '/tasks/' + taskID);
    }

    /** */

  }, {
    key: 'listWorkflows',
    value: function listWorkflows() {
      return this.listResource('workflows');
    }

    /** */

  }, {
    key: 'createStoryLink',
    value: function createStoryLink(params) {
      return this.createResource('story-links', params);
    }

    /** */

  }, {
    key: 'getStoryLink',
    value: function getStoryLink(storyLinkID) {
      return this.getResource('story-links/' + storyLinkID);
    }

    /** */

  }, {
    key: 'deleteStoryLink',
    value: function deleteStoryLink(storyLinkID) {
      return this.deleteResource('story-links/' + storyLinkID);
    }

    /** */

  }, {
    key: 'listFiles',
    value: function listFiles() {
      return this.listResource('files');
    }

    /** */

  }, {
    key: 'updateFile',
    value: function updateFile(fileID, params) {
      return this.updateResource('files/' + fileID, params);
    }

    /** */

  }, {
    key: 'deleteFile',
    value: function deleteFile(fileID) {
      return this.deleteResource('files/' + fileID);
    }

    /** */

  }, {
    key: 'listLinkedFiles',
    value: function listLinkedFiles() {
      return this.listResource('linked-files');
    }

    /** */

  }, {
    key: 'createLinkedFile',
    value: function createLinkedFile(params) {
      return this.createResource('linked-files', params);
    }

    /** */

  }, {
    key: 'updateLinkedFile',
    value: function updateLinkedFile(linkedFileID, params) {
      return this.updateResource('linked-files/' + linkedFileID, params);
    }

    /** */

  }, {
    key: 'deleteLinkedFile',
    value: function deleteLinkedFile(linkedFileID) {
      return this.deleteResource('linked-files/' + linkedFileID);
    }

    /** */

  }, {
    key: 'listTeams',
    value: function listTeams() {
      return this.listResource('teams');
    }

    /** */

  }, {
    key: 'getTeam',
    value: function getTeam(teamID) {
      return this.getResource('teams/' + teamID);
    }
  }], [{
    key: 'create',
    value: function create(token, options) {
      return new Client(options || defaultConfig, new _TokenRequestFactory2.default(token), new _FetchRequestPerformer2.default(), new _FetchRequestParser2.default());
    }
  }]);

  return Client;
}();

module.exports = Client;